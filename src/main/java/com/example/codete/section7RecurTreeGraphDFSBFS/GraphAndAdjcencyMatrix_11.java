package com.example.codete.section7RecurTreeGraphDFSBFS;

public class GraphAndAdjcencyMatrix_11 {

    // 그래프가 뭔지 그래프를 포함하는 방법을 배움.
    // 그래프와 인접행렬
    // 1. 무방향 그래프
    // 1-2-5
    // | |
    // 3-4

    // G(V,E) vertax(노드), Edge
    // 무방향이지만 양방향이라고 보면 됨. 양쪽 다 갈 수 있다. 도시,도로 라고 봐도 됨.
    // 1 2 / 1 3 / 2 4 / 4 5 / 2 5 -> 간선의 개수 5 노드의 개수 5
    // 2차원 배열 그래프를 잡을 수 있음
    //   1 2 3 4 5
    // 1   1 1
    // 2 1     1 1
    // 3 1     1
    // 4   1
    // 5   1        //나머지는 0 -> 체크된 것만 연결된 것. 인접행렬 가지고 그래프가 어떻게 생겻구나의 예제
    // graph[a][b] = 1;
    // graph[b][a] = 1;

    // 2. 방향 그래프
    // 이동하는 방향이 있다. 1에서 2만 갈 수 있지 2에서 1은 못간다.
    // 1->2->5
    // |  ^
    // V  |
    // 3->4
    // 1 2 / 1 3 / 3 4 / 4 2 / 2 5 -> 이런식으로만 간선그래프 나옴. 행->열로 이동한다로 보세요
    // 얘도 마찬가지로 2차원 배열 그래프
    //   1 2 3 4 5
    // 1   1 1
    // 2         1
    // 3       1
    // 4   1
    // 5
    // graph[a][b] = 1;

    // 3. 가중치 방향 그래프
    // 방향 그래프에 간선에 가중치가 있는 것.
    //   2  5
    //  1->2->5
    // 4|  ^
    //  V  |2
    //  3->4
    //   5
    // 이걸 인접행렬로...
    // graph[a][b] = c(가중치)
    // 1 2 2 / 2 5 5 / 4 2 2 / 1 3 4 / 3 4 5
    //   1 2 3 4 5
    // 1   2 4
    // 2         5
    // 3       5
    // 4   2
    // 5

    //문제
    // 첫줄에는 정점의 수 N(1<=N<=20)와 간선의 수 M가 주어짐. 그 다음부터 M줄에 걸쳐 연결정보가 주어진다.
    // 총 가지수를 출력
    // 5 9
    // 1 2
    // 1 3
    // 1 4
    // 2 1
    // 2 3
    // 2 5
    // 3 4
    // 4 2
    // 4 5


    public static void main(String args[]) {
        GraphAndAdjcencyMatrix_11 T = new GraphAndAdjcencyMatrix_11();
        System.out.println("이론만~~");
    }
}
